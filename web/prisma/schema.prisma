generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum UserType {
    DONOR
    NGO
    VENDOR
}

enum DisasterStatus {
    ACTIVE
    RESOLVED
    ONGOING
}

enum FocusArea {
    FOOD
    MEDICAL
    TRAVEL
    INFRASTRUCTURE
    OTHER
}

model User {
    id       String   @id @default(cuid())
    name     String?
    email    String?  @unique
    image    String?
    userType UserType
    phoneNo  String
    did      String?  @unique // DID is now optional
    walletId String   @unique // Wallet address is now unique and required for SIWE
    aadhar   String?

    accounts Account[]
    sessions Session[]
    posts    Post[]

    NGO NGO[]
}

model NGO {
    id           String   @id @default(cuid())
    name         String
    email        String?  @unique
    locationLat  Float
    locationLong Float
    mission      String
    vision       String
    description  String
    website      String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    // Relation to User
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Many-to-many relation with disasters
    ngoDisasters NGOOnDisaster[]

    // Many-to-many relation with focus areas
    focusAreas NGOFocusArea[]
}

model NGOFocusArea {
    id        String    @id @default(cuid())
    ngo       NGO       @relation(fields: [ngoId], references: [id], onDelete: Cascade)
    ngoId     String
    focusArea FocusArea
}

// Explicit Many-to-Many Relation Between NGO and Disaster
model NGOOnDisaster {
    id         String   @id @default(cuid())
    ngo        NGO      @relation(fields: [ngoId], references: [id], onDelete: Cascade)
    ngoId      String
    disaster   Disaster @relation(fields: [disasterId], references: [id], onDelete: Cascade)
    disasterId String
}

model Disaster {
    id           String         @id @default(cuid())
    name         String
    description  String
    locationLat  Float
    locationLong Float
    status       DisasterStatus @default(ACTIVE)
    amountUsed   Float          @default(0.0)
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt

    // Many-to-Many with NGOs
    ngoDisasters NGOOnDisaster[]

    @@index([name])
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for NextAuth + SIWE
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    nonce String? // Nonce for SIWE authentication

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
