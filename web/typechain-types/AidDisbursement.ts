/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AidDisbursementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "beneficiaries"
      | "depositFunds"
      | "disburseFunds"
      | "donors"
      | "getBeneficiaryDetails"
      | "getContractBalance"
      | "getDonorDetails"
      | "registerBeneficiary"
      | "registerDonor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BeneficiaryRegistered"
      | "DonorDeposit"
      | "FundsDisbursed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disburseFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDonorDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerBeneficiary",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDonor",
    values: [AddressLike, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disburseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDonorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDonor",
    data: BytesLike
  ): Result;
}

export namespace BeneficiaryRegisteredEvent {
  export type InputTuple = [wallet: AddressLike, did: string];
  export type OutputTuple = [wallet: string, did: string];
  export interface OutputObject {
    wallet: string;
    did: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DonorDepositEvent {
  export type InputTuple = [donor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [donor: string, amount: bigint];
  export interface OutputObject {
    donor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsDisbursedEvent {
  export type InputTuple = [beneficiary: AddressLike, amount: BigNumberish];
  export type OutputTuple = [beneficiary: string, amount: bigint];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AidDisbursement extends BaseContract {
  connect(runner?: ContractRunner | null): AidDisbursement;
  waitForDeployment(): Promise<this>;

  interface: AidDisbursementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  beneficiaries: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint] & {
        did: string;
        uid: string;
        wallet: string;
        fundsReceived: bigint;
      }
    ],
    "view"
  >;

  depositFunds: TypedContractMethod<[], [void], "payable">;

  disburseFunds: TypedContractMethod<
    [_wallet: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  donors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint] & {
        did: string;
        aadhaar: string;
        wallet: string;
        balance: bigint;
      }
    ],
    "view"
  >;

  getBeneficiaryDetails: TypedContractMethod<
    [_wallet: AddressLike],
    [[string, string, bigint]],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getDonorDetails: TypedContractMethod<
    [_wallet: AddressLike],
    [[string, string, bigint]],
    "view"
  >;

  registerBeneficiary: TypedContractMethod<
    [_wallet: AddressLike, _did: string, _uid: string],
    [void],
    "nonpayable"
  >;

  registerDonor: TypedContractMethod<
    [_wallet: AddressLike, _did: string, _aadhaar: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beneficiaries"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint] & {
        did: string;
        uid: string;
        wallet: string;
        fundsReceived: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "depositFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "disburseFunds"
  ): TypedContractMethod<
    [_wallet: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint] & {
        did: string;
        aadhaar: string;
        wallet: string;
        balance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBeneficiaryDetails"
  ): TypedContractMethod<
    [_wallet: AddressLike],
    [[string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDonorDetails"
  ): TypedContractMethod<
    [_wallet: AddressLike],
    [[string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerBeneficiary"
  ): TypedContractMethod<
    [_wallet: AddressLike, _did: string, _uid: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerDonor"
  ): TypedContractMethod<
    [_wallet: AddressLike, _did: string, _aadhaar: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BeneficiaryRegistered"
  ): TypedContractEvent<
    BeneficiaryRegisteredEvent.InputTuple,
    BeneficiaryRegisteredEvent.OutputTuple,
    BeneficiaryRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DonorDeposit"
  ): TypedContractEvent<
    DonorDepositEvent.InputTuple,
    DonorDepositEvent.OutputTuple,
    DonorDepositEvent.OutputObject
  >;
  getEvent(
    key: "FundsDisbursed"
  ): TypedContractEvent<
    FundsDisbursedEvent.InputTuple,
    FundsDisbursedEvent.OutputTuple,
    FundsDisbursedEvent.OutputObject
  >;

  filters: {
    "BeneficiaryRegistered(address,string)": TypedContractEvent<
      BeneficiaryRegisteredEvent.InputTuple,
      BeneficiaryRegisteredEvent.OutputTuple,
      BeneficiaryRegisteredEvent.OutputObject
    >;
    BeneficiaryRegistered: TypedContractEvent<
      BeneficiaryRegisteredEvent.InputTuple,
      BeneficiaryRegisteredEvent.OutputTuple,
      BeneficiaryRegisteredEvent.OutputObject
    >;

    "DonorDeposit(address,uint256)": TypedContractEvent<
      DonorDepositEvent.InputTuple,
      DonorDepositEvent.OutputTuple,
      DonorDepositEvent.OutputObject
    >;
    DonorDeposit: TypedContractEvent<
      DonorDepositEvent.InputTuple,
      DonorDepositEvent.OutputTuple,
      DonorDepositEvent.OutputObject
    >;

    "FundsDisbursed(address,uint256)": TypedContractEvent<
      FundsDisbursedEvent.InputTuple,
      FundsDisbursedEvent.OutputTuple,
      FundsDisbursedEvent.OutputObject
    >;
    FundsDisbursed: TypedContractEvent<
      FundsDisbursedEvent.InputTuple,
      FundsDisbursedEvent.OutputTuple,
      FundsDisbursedEvent.OutputObject
    >;
  };
}
